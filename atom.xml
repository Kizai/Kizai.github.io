<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KizaiBlog</title>
  
  <subtitle>Keep input zealous all intersting things</subtitle>
  <link href="http://kizai.github.io/atom.xml" rel="self"/>
  
  <link href="http://kizai.github.io/"/>
  <updated>2021-11-07T16:28:15.291Z</updated>
  <id>http://kizai.github.io/</id>
  
  <author>
    <name>Kizai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式匹配规则</title>
    <link href="http://kizai.github.io/2021/11/08/re/"/>
    <id>http://kizai.github.io/2021/11/08/re/</id>
    <published>2021-11-07T16:22:22.000Z</published>
    <updated>2021-11-07T16:28:15.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本正则表达式"><a href="#基本正则表达式" class="headerlink" title="基本正则表达式"></a>基本正则表达式</h2><center>BRE元字符表</center><div class="table-container"><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">将*前面的正则表达式匹配的结果重复任意次(含0次)。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">与星号(*)相同，只是至少重复1次，GNU的扩展功能。</td></tr><tr><td style="text-align:center">\?</td><td style="text-align:center">与星号(*)相同，只是最多重复1次，GNU的扩展功能。</td></tr><tr><td style="text-align:center">{i}</td><td style="text-align:center">与星号(*)相同，只是重复指定的i次。</td></tr><tr><td style="text-align:center">{i,j}</td><td style="text-align:center">与星号(*)相同，只是重复i至j次。</td></tr><tr><td style="text-align:center">{i, }</td><td style="text-align:center">与星号(*)相同，只是至少重复i次。</td></tr><tr><td style="text-align:center">(regexp)</td><td style="text-align:center">将regexp看作一个整体，用于后向引用，与\digit配合使用。</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配任意单个字符。</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">表示行首,匹配模版空间开始处的NULL字符串。</td></tr><tr><td style="text-align:center">^abc</td><td style="text-align:center">匹配以 abc 开头的字符串</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">表示行尾,匹配的是模版空间结束处的NULL字符串。</td></tr><tr><td style="text-align:center">}$</td><td style="text-align:center">匹配以大括号结尾的字符串</td></tr><tr><td style="text-align:center">[list]</td><td style="text-align:center">匹配方括号中的字符列表中的任意一个。</td></tr><tr><td style="text-align:center"><sup><a href="#fn_list" id="reffn_list">list</a></sup></td><td style="text-align:center">否定匹配方括号中的字符列表中的任意一个。</td></tr><tr><td style="text-align:center">regexp1regexp2</td><td style="text-align:center">匹配regexp1和regexp2的连接结果。</td></tr><tr><td style="text-align:center">\digit</td><td style="text-align:center">匹配正则表达式前半部分定义的后向引用的第digit个子表达式。digit为1至9的数字, 1为从左开始。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配换行符。</td></tr><tr><td style="text-align:center">\meta</td><td style="text-align:center">将元字符meta转换成普通字符，以便匹配该字符本身，有$、 *、 .、 [、  和 ^。</td></tr></tbody></table></div><center>字符匹配表</center><div class="table-container"><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"> [a-z]</td><td style="text-align:center">表示<code>a-z</code>字符中的一个，也就是小写字母</td><td></td></tr><tr><td style="text-align:center"> [0-9]</td><td style="text-align:center">表示<code>0-9</code>字符中的一个，也就是数字</td><td></td></tr><tr><td style="text-align:center"> [A-Z]</td><td style="text-align:center">表示<code>A-Z</code>字符中的一个，也就是大写字母</td><td></td></tr><tr><td style="text-align:center"> [abc]</td><td style="text-align:center">表示字符<code>a</code>或字符<code>b</code>或字符<code>c</code></td><td></td></tr><tr><td style="text-align:center"> <sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></td><td style="text-align:center">表示非数字类型字符</td><td></td></tr></tbody></table></div><h2 id="拓展正则表达式"><a href="#拓展正则表达式" class="headerlink" title="拓展正则表达式"></a>拓展正则表达式</h2><p>扩展正则表达式除了以下元字符与基本正则表达式不同外，其余相似。</p><p align="left">BRE与ERE元字符对应表</p><div class="table-container"><table><thead><tr><th style="text-align:center">基本正则表达式</th><th style="text-align:center">扩展正则表达式</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>\?</code></td><td style="text-align:center">?</td><td style="text-align:center">表示前置字符有 0 个或 1 个；</td></tr><tr><td style="text-align:center"><code>\+</code></td><td style="text-align:center">+</td><td style="text-align:center">表示前置字符有 1 个或多个；</td></tr><tr><td style="text-align:center"><code>\</code></td><td style="text-align:center"><code>中竖线</code></td><td style="text-align:center">表示匹配其中的一项即可；</td></tr><tr><td style="text-align:center"><code>\&#123; \&#125;</code></td><td style="text-align:center">{ }</td><td style="text-align:center">和基本正则中的大括号中意义相同，只不过使用时不用加 转义符号；</td></tr><tr><td style="text-align:center"><code>\( \)</code></td><td style="text-align:center">( )</td><td style="text-align:center">表示分组，(a\b)b 表示可以匹配 ab 或 bb 子串，且命令表达式中可以通过 \1、\2 来表示匹配的变量</td></tr></tbody></table></div><h2 id="常用转义字符"><a href="#常用转义字符" class="headerlink" title="常用转义字符"></a>常用转义字符</h2><center>转义字符表</center><div class="table-container"><table><thead><tr><th style="text-align:center">转义字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\a</td><td style="text-align:center">匹配一个BEL字符。</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">匹配一个换页字符。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行字符。</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车字符。</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个水平Tab字符。</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">匹配一个垂直Tab字符。</td></tr><tr><td style="text-align:center">\cX</td><td style="text-align:center">匹配Control+X，X是任意字符。</td></tr><tr><td style="text-align:center">\dXXX</td><td style="text-align:center">匹配一个ASCII码是十进制XXX的字符。</td></tr><tr><td style="text-align:center">\oXXX</td><td style="text-align:center">匹配一个ASCII码是八进制XXX的字符。</td></tr><tr><td style="text-align:center">\xXX</td><td style="text-align:center">匹配一个ASCII码是十六进制XX的字符。</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配任意一个单词字符(字母、数字和下划线)。</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任意一个非单词字符。</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配一个单词的边界符：字符的左边是一个单词字符，并且右边是一个非单词字符，反之亦然。</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">匹配除单词边界符外所有字符：字符的左边和右边同时是单词字符或非单词字符。</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本正则表达式&quot;&gt;&lt;a href=&quot;#基本正则表达式&quot; class=&quot;headerlink&quot; title=&quot;基本正则表达式&quot;&gt;&lt;/a&gt;基本正则表达式&lt;/h2&gt;&lt;center&gt;BRE元字符表&lt;/center&gt;

&lt;div class=&quot;table-container</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux文件权限详解</title>
    <link href="http://kizai.github.io/2021/11/08/linux-file-permissions/"/>
    <id>http://kizai.github.io/2021/11/08/linux-file-permissions/</id>
    <published>2021-11-07T16:17:55.000Z</published>
    <updated>2021-11-09T12:42:29.131Z</updated>
    
    <content type="html"><![CDATA[<p>Linux是一个多用户操作系统，它以“所有权”和“权限”的概念来保​​证文件的安全。</p><h2 id="Users-用户-和groups（组）"><a href="#Users-用户-和groups（组）" class="headerlink" title="Users(用户)和groups（组）"></a><code>Users(用户)</code>和<code>groups（组）</code></h2><ul><li>Linux 使用用户的概念来区分使用计算机的各种人。</li><li>每个用户都有一些与之关联的属性，例如用户 ID 和主目录。</li><li>为了更轻松地管理用户，您可以将用户添加到“组”中。</li><li>一个组可以有零个或多个用户。特定用户与“默认组”相关联，也可以是系统上其他组的成员。</li><li>如果要查看系统上的用户，可以/etc/passwd 通过运行以下命令查看文件：<pre class=" language-lang-bash"><code class="language-lang-bash">$ cat /etc/passwd</code></pre></li><li>在这里，每一行都包含用户的详细信息。具体来说，您可以在每一行的开头看到用户名，在第一行之前<code>:</code>。</li><li>同样，您可以<code>/etc/group</code>通过运行以下命令查看文件来查看系统上的组：<pre class=" language-lang-bash"><code class="language-lang-bash">$ cat /etc/group</code></pre></li><li>同样，每一行都包含用户的详细信息。每行的第一部分包含组名。运行这些命令时，您会注意到还有许多其他用户和组不是您创建的。这些是系统用户和组，用于安全地运行后台进程。</li></ul><h2 id="Ownership（所有权）-和-permissions（权限）"><a href="#Ownership（所有权）-和-permissions（权限）" class="headerlink" title="Ownership（所有权） 和 permissions（权限）"></a><code>Ownership（所有权）</code> 和 <code>permissions（权限）</code></h2><p>在 Linux 中，我们使用权限来控制用户可以对文件或目录执行的操作。Linux 使用三种类型的权限：</p><ul><li><strong>读取（r）</strong>：对于文件，读取权限允许用户查看文件的内容。对于目录，读取权限允许用户查看存储在其中的文件和其他目录的名称。</li><li><strong>写 (w)</strong>：对于文件，写权限允许用户修改和删除文件。对于目录，写权限允许用户修改其内容（创建、删除和重命名其中的文件）。但是，除非同时启用了执行权限，否则此权限对目录没有影响。</li><li><strong>执行 (x)</strong>：当在文件上设置时，写权限允许它被执行。但是，除非还启用了读取权限，否则该权限对文件没有影响。另一方面，对于目录，写入权限允许用户进入目录（带有cd）并查看其中的文件和目录的元数据（如文件权限）。</li></ul><p>文件和目录只能由单个用户和单个组拥有。每当用户创建文件或目录时，该文件由用户和用户的默认组“拥有”。</p><p>对于任何文件或目录，都有三种类型的“权限类”。您可以为这些类分配不同的权限，从而控制谁可以访问和修改文件。权限类如下：</p><ul><li><strong>用户</strong>：此类中的权限会影响文件的所有者。</li><li><strong>组</strong>：此类中的权限影响拥有该文件的组。但是，如果所有者用户在该组中，则应用“用户”权限，而不是组权限。</li><li><strong>其他</strong>：此类中的权限会影响系统上的所有其他用户。</li></ul><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><p>查看给定目录中文件权限的最简单方法是运行：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ ls -l <目标路径></code></pre><p>如果要查看当前目录中的权限，请在末尾省略目录名称：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ ls -l</code></pre><p>例如，我们使用”目录”显示目录的内容。输出以列的形式显示，如下所示：<code>ls -l /etc</code></p><p><img src="https://www.booleanworld.com/wp-content/uploads/2018/04/permissions-annotated.png?ezimgfmt=ng:webp/ngcb20" alt="image"></p><p>由上图可知”文件模式”、”所有者”、”组”的具体信息。<br>而”文件模式”列以紧凑的方式显示文件类型和权限，如下所示：</p><p><img src="https://www.booleanworld.com/wp-content/uploads/2018/04/classes.png?ezimgfmt=ng:webp/ngcb20" alt="image"></p><ul><li>第一个字符表示文件的类型。一个正常的文件代表与一个<code>-</code>,目录与一个<code>d</code>和象征性的链接<code>l</code>。例如，在截图中<code>ls</code>，您可以说<code>acpi</code>这是一个目录，而<code>adduser.conf</code>是一个文件。</li><li>然后，我们拥有相应的”用户”、”组”和”其他”类的权限。<code>rwx</code>表示这些类是否具有读取、编写和执行权限。如果<code>rwx</code>中出现一个<code>-</code>，则意味着相应的权限被禁用了。</li><li>现在，思考下<code>at.deny</code>这个文件，它的”文件模式”是<code>-rw-r--r--</code>。这意味着”root”用户拥有读取、编写的权限。”root”组中的用户以及任何”其他”用户只拥有读取的权限。</li></ul><h3 id="表示权限：数字和符号模式"><a href="#表示权限：数字和符号模式" class="headerlink" title="表示权限：数字和符号模式"></a>表示权限：数字和符号模式</h3><p>上面的例子已经介绍如何使用<code>rwx</code>表示权限，这种方式叫做”符号模式”，但是，还有一种使用数字（称为”数字模式”）来表示权限的附加方式。</p><p>例如，请考虑上面讨论过的<code>acpi</code>目录。此目录的符号模式是<code>rwxr-xr-x</code> 。现在，为了获得等效的数字模式，可以采取”用户”、”组”和”其他”的单独权限。如果启用了权限，就放 <code>1``表示，如果禁用了，就放</code>0```表示。通过这样做，我们获得一个二进制号码，并将其转换为十进制。因此，对于目录，您可以获得如下所示的符号模式：</p><p><img src="https://www.booleanworld.com/wp-content/uploads/2018/04/43260_115.png?ezimgfmt=ng:webp/ngcb20" alt="image"></p><p>因此，这样获得的数字模式为<code>755</code>。同样，如果数字模式（如 <code>644</code>），您可以将其转换为二进制，每一个数字代表一组二进制，然后放入对应的字母<code>rwx</code>中,如结果为<code>1</code>就表示启用权限就要在对应的位置写上对应权限的字母，如果是<code>0</code>就表示禁用了权限，在对应位置写上<code>-</code>。可以参考下图的分析：</p><p><img src="https://www.booleanworld.com/wp-content/uploads/2018/04/sym2num1.png?ezimgfmt=ng:webp/ngcb20" alt="image"></p><p>因此，这样获得的符号模式为<code>rw-r--r--</code>,这就表示所有者有读写权限，而组用户和其他用户只要读权限。</p><h4 id="如果不熟悉转换二进制的方式解读权限，可以参考下图数字与权限的解读："><a href="#如果不熟悉转换二进制的方式解读权限，可以参考下图数字与权限的解读：" class="headerlink" title="如果不熟悉转换二进制的方式解读权限，可以参考下图数字与权限的解读："></a>如果不熟悉转换二进制的方式解读权限，可以参考下图数字与权限的解读：</h4><div class="table-container"><table><thead><tr><th style="text-align:center">二进制数</th><th style="text-align:center"><code>rwx</code></th><th style="text-align:center">权限描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center"><code>---</code></td><td style="text-align:center">无权限</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center"><code>--x</code></td><td style="text-align:center">执行</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>-w-</code></td><td style="text-align:center">写</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><code>-wx</code></td><td style="text-align:center">编写和执行</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><code>r--</code></td><td style="text-align:center">读</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><code>r-x</code></td><td style="text-align:center">阅读和执行</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><code>rw-</code></td><td style="text-align:center">读写</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center"><code>rwx</code></td><td style="text-align:center">阅读、编写和执行</td></tr></tbody></table></div><h3 id="更改权限：chmod命令"><a href="#更改权限：chmod命令" class="headerlink" title="更改权限：chmod命令"></a>更改权限：chmod命令</h3><p>创建文件或目录时，您可能需要更改某些权限。您可以通过<code>chmod</code>命令做到这一点。</p><p>首先，先创建一个用于测试目的的文件。</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ touch file.txtkizaiwsl2@KIZAI-DESKTOP:~$ touch file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rw-r--r-- 1 kizaiwsl2 kizaiwsl2 0 9月  16 21:56 file.txt</code></pre><p>可以使用<code>ls -l file.txt</code>来查看该文件的权限，由结果可知该文件的权限是<code>rw-r--r--</code>。</p><p>现在，假设您要添加所有用户的执行权限 - 所有者、组和其他用户。由于我希望为所有用户添加执行权限，因此我使用<code>a+x</code>实现这个功能：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ chmod a+x file.txt</code></pre><pre class=" language-lang-a```代表是改变所有用户的权限,```+```表示需要添加权限,```x```表示执行权限的意思，所以组合起来的意思是：给目标文件的所有用户添加执行的权限。"><code class="language-lang-a```代表是改变所有用户的权限,```+```表示需要添加权限,```x```表示执行权限的意思，所以组合起来的意思是：给目标文件的所有用户添加执行的权限。">```bashkizaiwsl2@KIZAI-DESKTOP:~$ chmod a+x file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxr-xr-x 1 kizaiwsl2 kizaiwsl2 0 9月  16 21:56 file.txt</code></pre><p>其实默认情况下<code>chmod</code>执行的对象是所有用户，你可以把<code>a</code>去掉，用下面的命令也同样能实现相同的功能。</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ chmod +x file.txt</code></pre><p>chmod还可以更细致改变文件的权限，u、g、o这些字母分别表示“用户”、“组”、“其他用户”，同样它也能使用-去掉某一个权限，还是以file.txt的文件为例，我现在不想其他用户拥有读和执行的权限，组里面去掉读的权限，可以使用以下的命令：注意我使用,来分别对不同用户进行权限的操作。</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ chmod o-rx,g-r file.txtkizaiwsl2@KIZAI-DESKTOP:~$ chmod o-rx,g-r file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwx--x--- 1 kizaiwsl2 kizaiwsl2 0 9月  16 21:56 file.txt</code></pre><p>有时，我希望可以给设置的权限，而不是增加或删除权限。<code>chmod</code>命令是支持使用<code>=</code>来实现这个功能。<br>例如，我想把file.txt的文件设置为所有者的权限为<code>rwx</code>,组为<code>r--</code>,其他用户为<code>--x</code>。可以用下面的命令来实现。</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ chmod u=rwx,g=r,o=x file.txtkizaiwsl2@KIZAI-DESKTOP:~$ chmod u=rwx,g=r,o=x file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxr----x 1 kizaiwsl2 kizaiwsl2 0 9月  16 21:56 file.txt</code></pre><p>以上给文件赋权限都是采用符号的模式，现在开始介绍使用数字的模式来给文件赋值权限，这也是日后最常用的赋权限的主要方式。</p><p>如果我想把file.txt的权限修改为<code>rwxrw-r--</code>,那么它对应的数字权限应该为``764```,那么可以使用以下命令来修改：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ chmod 764 file.txtkizaiwsl2@KIZAI-DESKTOP:~$ chmod 764 file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxrw-r-- 1 kizaiwsl2 kizaiwsl2 0 9月  16 21:56 file.txt</code></pre><p>最后，如何你想设置一个文件夹的所有文件的权限可以使用<code>-R</code>来实现。<br>例如，你想添加执行权限在<code>test</code>文件夹的所有文件，可以使用：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ chmod -R +x test</code></pre><p>请记住你只能修改您拥有的文件的权限，而不能修改不是您的文件权限，如果你真的需要修改别人的文件权限的话，那么可以使用<code>sudo</code>来实现.</p><pre class=" language-lang-bash"><code class="language-lang-bash">sudo chmod <文件权限> <文件路径/文件名></code></pre><h3 id="更改所有权：chown命令"><a href="#更改所有权：chown命令" class="headerlink" title="更改所有权：chown命令"></a>更改所有权：<code>chown</code>命令</h3><p>为了更改文件或目录的所有权，您可以使用<code>chown</code>命令。它可以更改所有者和所有者的组。(还有一个<code>chgrp</code>命令，它改变了拥有文件的组，但<code>chown</code>也可以这样做。)</p><p>假设，您有一个文件file.txt,您希望将所有权更改为用户，你可以运行以下命令：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ sudo chown root file.txt</code></pre><p>不像<code>chmod</code>命令，第一次使用<code>chown</code>命令需要用到<code>roo</code>用户，后面再使用<code>chown</code>命令就不需要用<code>sudo</code>了。</p><p>可以查看执行后的结果;</p><pre class=" language-lang-bash"><code class="language-lang-bash">kizaiwsl2@KIZAI-DESKTOP:~$ sudo chown root file.txt[sudo] password for kizaiwsl2:kizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxrw-r-- 1 root kizaiwsl2 0 9月  16 21:56 file.txt</code></pre><p>假设您想将所有者组更改为<code>daemon</code>。为此，提及以类似名称需要在前面加一个<code>:</code></p><pre class=" language-lang-bash"><code class="language-lang-bash">$ sudo chown :daemon file.txtkizaiwsl2@KIZAI-DESKTOP:~$ sudo chown :daemon file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxrw-r-- 1 root daemon 0 9月  16 21:56 file.txt</code></pre><p>如果您想更改所有者用户以及所有者组，把file.txt文件的用户改成<code>kizaiwsl2</code>，用户组<code>root</code>，可以运行以下命令：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ sudo chown kizaiwsl2:root file.txtkizaiwsl2@KIZAI-DESKTOP:~$ sudo chown kizaiwsl2:root file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxrw-r-- 1 kizaiwsl2 root 0 9月  16 21:56 file.txt</code></pre><p>有时，您可能需要将所有者更改为特定用户及其默认组。虽然您可以手动找出用户的默认组，然后运行命令，<code>chown</code> 允许您通过排除：在末尾自动执行此操作。例如，如果您要将所有权更改为<code>root</code>及其默认组，请运行：</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ sudo chown root: file.txtkizaiwsl2@KIZAI-DESKTOP:~$ sudo chown root: file.txtkizaiwsl2@KIZAI-DESKTOP:~$ ls -l file.txt-rwxrw-r-- 1 root root 0 9月  16 21:56 file.txt</code></pre><p>像<code>chmod</code>命令一样,<code>chown</code>也支持<code>-R</code>标志。<br>例如，如果您要更改所有文件的所有者用户以root用于test目录，请运行：</p><pre class=" language-lang-baash"><code class="language-lang-baash">$ sudo chown -R root: test</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux是一个多用户操作系统，它以“所有权”和“权限”的概念来保​​证文件的安全。&lt;/p&gt;
&lt;h2 id=&quot;Users-用户-和groups（组）&quot;&gt;&lt;a href=&quot;#Users-用户-和groups（组）&quot; class=&quot;headerlink&quot; title=&quot;User</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tmux常用命令</title>
    <link href="http://kizai.github.io/2021/11/07/tmux/"/>
    <id>http://kizai.github.io/2021/11/07/tmux/</id>
    <published>2021-11-07T15:54:07.000Z</published>
    <updated>2021-11-08T17:08:03.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装tmux"><a href="#安装tmux" class="headerlink" title="安装tmux"></a>安装tmux</h3><pre class=" language-lang-bash"><code class="language-lang-bash">sudo apt install tmux</code></pre><h3 id="启动或退出"><a href="#启动或退出" class="headerlink" title="启动或退出"></a>启动或退出</h3><pre class=" language-lang-bash"><code class="language-lang-bash"># 启动创建一个session$ tmux# 退出$ exit or crtl+d</code></pre><h3 id="前缀键"><a href="#前缀键" class="headerlink" title="前缀键"></a>前缀键</h3><ul><li><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p></li><li><p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p></li><li><p>然后，按下 <code>ESC</code> 键或<code>q</code>键，就可以退出帮助。</p></li></ul><h3 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h3><ul><li>第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</li><li>使用编号区分会话，不太直观，更好的方法是为会话起名。<pre class=" language-lang-bash"><code class="language-lang-bash"># 新建一个指定名称的会话。$ tmux new -s <session-name></code></pre><h3 id="分离会话"><a href="#分离会话" class="headerlink" title="分离会话"></a>分离会话</h3></li><li>在 Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。<pre class=" language-lang-bash"><code class="language-lang-bash">$ tmux detach</code></pre></li><li>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</li><li><code>tmux ls</code>可以查看当前所有的tmux会话。<pre class=" language-lang-bash"><code class="language-lang-bash">$ tmux ls# or$ tmux list-session</code></pre><h3 id="接入会话"><a href="#接入会话" class="headerlink" title="接入会话"></a>接入会话</h3></li><li><code>tmux attach</code>命令用于重新接入某个已存在的会话。<br>```bash<h1 id="使用会话编号"><a href="#使用会话编号" class="headerlink" title="使用会话编号"></a>使用会话编号</h1>$ tmux attach -t 0<h1 id="or"><a href="#or" class="headerlink" title="or"></a>or</h1>$ tmux a -t 0<h1 id="or-1"><a href="#or-1" class="headerlink" title="or"></a>or</h1>$ tmux a</li></ul><h1 id="使用会话名称"><a href="#使用会话名称" class="headerlink" title="使用会话名称"></a>使用会话名称</h1><p>$ tmux attach -t <session-name></p><pre><code>### 杀死会话* ```tmux kill-session```命令用于杀死某个会话。```bash# 使用会话编号$ tmux kill-session -t 0# 使用会话名称$ tmux kill-session -t &lt;session-name&gt;</code></pre><h3 id="切换会话"><a href="#切换会话" class="headerlink" title="切换会话"></a>切换会话</h3><p><code>tmux switch</code><br>命令用于切换会话。</p><pre class=" language-lang-bash"><code class="language-lang-bash"># 使用会话编号$ tmux switch -t 0# 使用会话名称$ tmux switch -t <session-name></code></pre><h3 id="重命名会话"><a href="#重命名会话" class="headerlink" title="重命名会话"></a>重命名会话</h3><p><code>tmux rename-session</code><br>命令用于重命名会话。</p><pre class=" language-lang-bash"><code class="language-lang-bash">$ tmux rename-session -t 0 <new-name># or 在session中使用"Ctrl+b $"也能对会话进行重命名</code></pre><h3 id="会话快捷键"><a href="#会话快捷键" class="headerlink" title="会话快捷键"></a>会话快捷键</h3><ul><li>下面是一些会话相关的快捷键。<pre class=" language-lang-bash"><code class="language-lang-bash">Ctrl+b d：# 分离当前会话。Ctrl+b s：# 列出所有会话。Ctrl+b $：# 重命名当前会话。</code></pre><h3 id="最简操作流程"><a href="#最简操作流程" class="headerlink" title="最简操作流程"></a>最简操作流程</h3>```</li></ul><ol><li>新建会话tmux new -s my_session。</li><li>在 Tmux 窗口运行所需的程序。</li><li>按下快捷键Ctrl+b d将会话分离。</li><li>下次使用时，重新连接到会话tmux attach-session -t my_session。<br>```</li></ol><h3 id="窗格操作"><a href="#窗格操作" class="headerlink" title="窗格操作"></a>窗格操作</h3><ul><li>Tmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。</li><li><code>tmux split-window</code>命令用来划分窗格。<br>```<h1 id="划分上下两个窗格"><a href="#划分上下两个窗格" class="headerlink" title="划分上下两个窗格"></a>划分上下两个窗格</h1>$ tmux split-window <h1 id="or-使用快捷键”Ctrl-d-“-“"><a href="#or-使用快捷键”Ctrl-d-“-“" class="headerlink" title="or 使用快捷键”Ctrl+d “ “"></a>or 使用快捷键”Ctrl+d “ “</h1></li></ul><h1 id="划分左右两个窗格"><a href="#划分左右两个窗格" class="headerlink" title="划分左右两个窗格"></a>划分左右两个窗格</h1><p>$ tmux split-window -h</p><h1 id="or-使用快捷键”Ctrl-d-“"><a href="#or-使用快捷键”Ctrl-d-“" class="headerlink" title="or 使用快捷键”Ctrl+d % “"></a>or 使用快捷键”Ctrl+d % “</h1><pre><code>### 窗格快捷键</code></pre><ul><li>Ctrl+b %：划分左右两个窗格。</li><li>Ctrl+b “：划分上下两个窗格。</li><li>Ctrl+b <arrow key>：光标切换到其他窗格。<arrow key>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓。</li><li>Ctrl+b ;：光标切换到上一个窗格。</li><li>Ctrl+b o：光标切换到下一个窗格。</li><li>Ctrl+b {：当前窗格与上一个窗格交换位置。</li><li>Ctrl+b }：当前窗格与下一个窗格交换位置。</li><li>Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</li><li>Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</li><li>Ctrl+b x：关闭当前窗格。</li><li>Ctrl+b !：将当前窗格拆分为一个独立窗口。</li><li>Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。</li><li>Ctrl+b Ctrl+<arrow key>：按箭头方向调整窗格大小。</li><li>Ctrl+b q：显示窗格编号。<br>```</li></ul><h3 id="窗口快捷键"><a href="#窗口快捷键" class="headerlink" title="窗口快捷键"></a>窗口快捷键</h3><pre><code>* Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。* Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。* Ctrl+b n：切换到下一个窗口。* Ctrl+b &lt;number&gt;：切换到指定编号的窗口，其中的&lt;number&gt;是状态栏上的窗口编号。* Ctrl+b w：从列表中选择窗口。* Ctrl+b ,：窗口重命名。</code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><pre><code># 列出所有快捷键，及其对应的 Tmux 命令$ tmux list-keys# 列出所有 Tmux 命令及其参数$ tmux list-commands# 列出当前所有 Tmux 会话的信息$ tmux info# 重新加载当前的 Tmux 配置$ tmux source-file ~/.tmux.conf</code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/">A Quick and Easy Guide to tmux</a></li><li><a href="https://danielmiessler.com/study/tmux/">Tactical tmux: The 10 Most Important Commands</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装tmux&quot;&gt;&lt;a href=&quot;#安装tmux&quot; class=&quot;headerlink&quot; title=&quot;安装tmux&quot;&gt;&lt;/a&gt;安装tmux&lt;/h3&gt;&lt;pre class=&quot; language-lang-bash&quot;&gt;&lt;code class=&quot;language-la</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kizai.github.io/2021/11/07/hello-world/"/>
    <id>http://kizai.github.io/2021/11/07/hello-world/</id>
    <published>2021-11-07T08:05:51.670Z</published>
    <updated>2021-11-07T08:05:51.670Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
